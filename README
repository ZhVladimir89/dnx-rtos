The folder hierarchy is as follow:
1) drivers  -- user drivers compatible with dnx module API. See example drivers.
               Internal folder organization depends on the user. To register
               module (driver) in the system, user shall add module name to the
               module register variable (regdrv_used_modules) e.g.:
               
                   USE_MODULE(UART),
               
               and shall define the driver part to import appropriate interface
               (regdrv_driver_table) e.g.:
               
                   USE_DRIVER_INTERFACE(UART, "uart1", UART_DEV_1, UART_PART_NONE).
               
               Please note, that the REGDRV_NUMBER_OF_REGISTERED_MODULES macro
               shall be updated to actual number of modules registered in the
               system. All changes user shall do in the system/user/regdrv.c
               and system/include/user/regdrv.h files.
               For file systems and programs the registration is similar.
              
2) programs -- user programs. Most API functions are compatible with starndard
               C libraries e.g. printf(), scanf(), fopen(), fwrite(), etc.
               See example programs.
               
3) system   -- folder contains all system dnx/FreeRTOS. Some files of the system
               shall be adjusted by users, for example: initd.c, config.h,
               regdrv.c, regfs.c, regprg.c and portable folder if user want to
               create new CPU port.
               List of system's folders:
               + config   -- contains a basic system configuration;
               + core     -- all core modules which cannot be modified by user;
               + fs       -- all core file systems which cannot be modified by user;
               + include  -- contains all system included (excluding FreeRTOS kernel).
                             The most of them cannot by modified by user excluding
                             localized in the 'user' folder.
                             Folder 'system' contains headers which shall be used
                             by user to write programs, modules and file systems
                             (system API).
               + kernel   -- FreeRTOS kernel and dnx wrapper. Cannot be modified by user;
               + portable -- contains all files which are architecture depending.
                             When new type of processor is required there shall
                             be created new ports. Two files are required to
                             create port: cpuctl.c and cpuctl.h. All other files
                             are architecture specific files like CPU hooks, etc.
                             See example files to know API.
               + user     -- files which can be modified by user are localized here.
                             Here is an 'initd' daemon, and registers of modules,
                             file systems and programs.

4) target   -- in this localization user can find compilation results.

5) tools    -- some tools used by user at the software development.
